#
# General settings
#
#   TargetBoard - board to run you application on
#   TargetOS    - operating system to use
#   SystemClock - clock of the ReconOS system
#   CFlags      - additional flags for compilation
#   LdFlags     - additional flags for linking
#
[General]
Name = Turtlebot3
TargetBoard = zcu104,0
TargetPart = xczu7ev-ffvc1156-2-e
ReferenceDesign = modelcar
TargetOS = linux64
#TargetOS = linux_x86
TargetXil = vivado,2020.1
TargetHls = vivado,2020.1
SystemClock = System
CFlags = -g -I $(RECONOS)/linux/tools/timer -I ../ -I ../Thirdparty/Pangolin/include -I /usr/include/eigen3/ -O3 -Wno-deprecated -Wno-unused-variable -Wno-deprecated-declarations -Wno-sign-compare -Wno-unused-label
LdFlags = -lm -lstdc++ `pkg-config --cflags --libs opencv` 
ROS2Distribution = dashing


CPUArchitecture = arm64
#CPUArchitecture = x86_64


#
# Clock definition
#
#   ClockSource - static or reconfigurable clock
#   ClockFreq   - initial clock frequency
#
[Clock@System]
ClockSource = static
ClockFreq = 100000000

[Clock@Threads]
ClockSource = dynamic
ClockFreq = 120000000


#
# Specification of hardware thread slots
#
#   Id               - id of the slot
#   Clock            - clock connected to the slot
#
[HwSlot@ReconfSlotSmall(0:1)]
Id = 0
Clock = Threads
Region_0 = SLICE_X0Y150:SLICE_X103Y199, DSP48_X0Y60:DSP48_X7Y79, RAMB18_X0Y60:RAMB18_X5Y79, RAMB36_X0Y30:RAMB36_X5Y39
Region_1 = SLICE_X0Y100:SLICE_X103Y149, DSP48_X0Y40:DSP48_X7Y59, RAMB18_X0Y40:RAMB18_X5Y59, RAMB36_X0Y20:RAMB36_X5Y29





#
# Resource definition
#
#   <Name> - type,<optional arguments>
#
[ResourceGroup@RCarControl]
drive_cmd = rosmsg, ackermann_msgs, ,msg ,Ackermann_Drive 
node_1 = rosnode, "CarControl"
subdrivecmd = rossub, node_1, drive_cmd, "/modelcar/drive_cmd", 10000


# [ResourceGroup@RCameraImageCompensation]
# camera_image = rosmsg, sensor_msgs ,msg ,Image 
# output_image = rosmsg, sensor_msgs ,msg ,Image 
# node_1 = rosnode, "image_compensation"
# SubData = rossub, node_1, camera_image, "/camera/image_raw", 10000
# PubData = rospub, node_1, output_image, "/camera/image_compensated"


#
# Specification of thread types
#
#   Slot          - slot to implement the hardware thread in
#   Source        - source if the hardware thread
#   ResourceGroup - resources of the hardware thread
#

[ReconosThread@CarControl]
Slot = ReconfSlotSmall(*)
HwSource = hls
SwSource = c
ResourceGroup = RCarControl




# [ReconosThread@Sobel]
# Slot = ReconfSlotLarge(*)
# HwSource = hls
# SwSource = c
# ResourceGroup = RSobel

# [ReconosThread@SortDemo]
# Slot = ReconfSlotSmall(*)
# HwSource = hls
# SwSource = c
# ResourceGroup = RSort

# [ReconosThread@Inverse]
# Slot = ReconfSlotSmall(*)
# HwSource = hls
# SwSource = c
# ResourceGroup = RInverse
# UseMem = true

# [ReconosThread@Mnist]
# Slot = ReconfSlotLarge(*)
# HwSource = hls
# SwSource = c
# ResourceGroup = RMnist
# UseMem = true

# [ReconosThread@Periodic]
# Slot = ReconfSlotLarge(*)
# HwSource = hls
# SwSource = c
# ResourceGroup = Rperiodic
# UseMem = true